# Dockerfile for Production
#
# Defines the build steps that we need to follow to get built Elixir application
# in Docker and later run it in production.
#
# We need to do a few things to prepare a release build:
#
# 0. Install pre-requisites
# 1. Compile static assets (mix assets.deploy)
# 2. Gzip and add fingerprints to these files (part of previous step)
# 3. Compile a release
#
# See https://hexdocs.pm/phoenix/releases.html for more detailed documentation.
#
# Usage:
#
#  * build: docker image build --build-arg ELIXIR_VERSION=1.12.3 ... --tag cr0t/lexin:0.3.0 .
#  * shell: docker container run --rm -it --entrypoint "" -p 127.0.0.1:4000:4000 cr0t/lexin sh
#  * run:   docker container run --rm -it -p 127.0.0.1:4000:4000 --name lexin cr0t/lexin
#  * exec:  docker container exec -it lexin sh
#  * logs:  docker container logs --follow --tail 100 lexin

ARG ELIXIR_VERSION
ARG ERLANG_VERSION
ARG ALPINE_VERSION

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${ERLANG_VERSION}-alpine-${ALPINE_VERSION}"
ARG RUNNER_IMAGE="alpine:${ALPINE_VERSION}"

# --- Stage: Building ---

FROM ${BUILDER_IMAGE} AS builder

# install build dependencies
RUN apk add --no-cache build-base

WORKDIR /app

RUN mix local.hex --force && mix local.rebar --force

ENV MIX_ENV="prod"

# to build an AMD64 image on M-based macs Docker uses QEMU virtual machines, so
# we have to pass custom ERL_FLAGS to fix segfaults, more info:
# - https://github.com/erlang/otp/pull/6340
# - https://github.com/livebook-dev/livebook/commit/6256b66bd37cb434f0bd19f58b68ec232ca9a7f7#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557R23
ENV ERL_FLAGS="+JMsingle true"

# install mix dependencies
COPY mix.exs mix.lock ./
RUN mix deps.get --only $MIX_ENV

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
RUN mkdir config
COPY config/config.exs config/${MIX_ENV}.exs config/
RUN mix deps.compile

COPY priv/gettext priv/gettext
COPY priv/static priv/static
COPY assets assets
COPY lib lib

# compile assets
RUN mix assets.deploy

# compile application
RUN mix compile

# changes to config/runtime.exs don't require recompiling the code
COPY config/runtime.exs config/

RUN mix release

# --- Stage: Running ---

# final image will only contain the compiled release and other runtime necessities
FROM ${RUNNER_IMAGE} AS runner

# install runtime dependencies (we need some font to generate OpenGraph images)
RUN apk add --no-cache libstdc++ ncurses-libs tini font-dejavu

USER nobody:nobody

WORKDIR "/app"

ENV MIX_ENV="prod"

# only copy the final release from the build stage
COPY --from=builder --chown=nobody:nobody /app/_build/${MIX_ENV}/rel/lexin ./

# if using an environment that doesn't automatically reap zombie processes, it
# is advised to add an init process (such as tini) as an entrypoint;
# see https://github.com/krallin/tini
ENTRYPOINT ["/sbin/tini", "--"]

CMD ["/app/bin/lexin", "start"]
