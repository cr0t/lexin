# Dockerfile for Production
#
# Defines the build steps that we need to follow to get built Elixir application in Docker and
# later run it in production.
#
# We need to do a few things to prepare a release build:
#
# 0. Install pre-requisites
# 1. Compile static assets (mix assets.deploy)
# 2. Gzip and add fingerprints to these files (part of previous step)
# 3. Compile a release
#
# See https://hexdocs.pm/phoenix/releases.html for more detailed documentation.
#
# Usage:
#
#  * build: docker image build --build-arg ELIXIR_VERSION=1.12.3 ... --tag cr0t/lexin:0.3.0 .
#  * shell: docker container run --rm -it --entrypoint "" -p 127.0.0.1:4000:4000 cr0t/lexin sh
#  * run:   docker container run --rm -it -p 127.0.0.1:4000:4000 --name lexin cr0t/lexin
#  * exec:  docker container exec -it lexin sh
#  * logs:  docker container logs --follow --tail 100 lexin

# --- Stage: Building ---

ARG ELIXIR_VERSION
ARG ERLANG_VERSION
ARG DEBIAN_VERSION

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${ERLANG_VERSION}-debian-${DEBIAN_VERSION}"
ARG RUNNER_IMAGE="debian:${DEBIAN_VERSION}"

FROM ${BUILDER_IMAGE} AS builder

# install build dependencies & do some clean ups
RUN apt-get update -y && apt-get install -y build-essential git \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"

# install mix dependencies
COPY mix.exs mix.lock ./
RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config/config.exs config/${MIX_ENV}.exs config/
RUN mix deps.compile

COPY priv priv
COPY assets assets
COPY lib lib

# compile assets
RUN mix assets.deploy

# compile the release
RUN mix compile

# changes to config/runtime.exs don't require recompiling the code
COPY config/runtime.exs config/

RUN mix release

# --- Stage: Running ---

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM ${RUNNER_IMAGE} AS runner

# install runtime dependencies & do some clean ups
RUN apt-get update -y \
  && apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates tini \
  && apt-get clean \
  && rm -f /var/lib/apt/lists/*_*

# set the locale
RUN sed -i "/en_US.UTF-8/s/^# //g" /etc/locale.gen && locale-gen

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

WORKDIR "/app"
RUN chown nobody /app

# set runner ENV
ENV MIX_ENV="prod"

# only copy the final release from the build stage
COPY --from=builder --chown=nobody:root /app/_build/${MIX_ENV}/rel/lexin ./

USER nobody

# if using an environment that doesn't automatically reap zombie processes, it is
# advised to add an init process such as tini via `apt-get install`
# above and adding an entrypoint. See https://github.com/krallin/tini for details
ENTRYPOINT ["/usr/bin/tini", "--"]

CMD ["/app/bin/lexin", "start"]
