# Dockerfile for Production
#
# Defines the build steps that we need to follow to get built Elixir application in Docker and
# later run it in production.
#
# We need to do a few things to prepare a release build:
#
# 0. Install pre-requisites
# 1. Compile static assets (mix assets.deploy)
# 2. Gzip and add fingerprints to these files (part of previous step)
# 3. Compile a release
#
# See https://hexdocs.pm/phoenix/releases.html for more detailed documentation.
#
# Usage:
#
#  * build: docker image build --build-arg ELIXIR_VERSION=1.12.3 ... --tag cr0t/lexin:0.3.0 .
#  * shell: docker container run --rm -it --entrypoint "" -p 127.0.0.1:4000:4000 cr0t/lexin sh
#  * run:   docker container run --rm -it -p 127.0.0.1:4000:4000 --name lexin cr0t/lexin
#  * exec:  docker container exec -it lexin sh
#  * logs:  docker container logs --follow --tail 100 lexin

# --- Stage: Building ---

ARG ELIXIR_VERSION
ARG ERLANG_VERSION
ARG ALPINE_VERSION

FROM docker.io/hexpm/elixir:$ELIXIR_VERSION-erlang-$ERLANG_VERSION-alpine-$ALPINE_VERSION AS build

# install build dependencies
# (maybe it's not necessary for simple projects)
RUN apk add --no-cache build-base git python3 curl

WORKDIR /app

RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ARG MIX_ENV="prod"
ENV MIX_ENV=$MIX_ENV

# install mix dependencies
COPY mix.exs mix.lock ./
RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config/config.exs config/$MIX_ENV.exs config/
COPY priv priv
COPY assets assets
COPY lib lib

RUN mix deps.compile && \
    mix assets.deploy && \
    mix compile

# changes to config/runtime.exs don't require recompiling the code
COPY config/runtime.exs config/
RUN mix release

# --- Stage: Running ---

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM docker.io/alpine:$ALPINE_VERSION AS app

RUN apk add --no-cache libstdc++ openssl ncurses-libs

ARG MIX_ENV="prod"
ENV USER="elixir"

# creates an unprivileged user to be used exclusively to run the app
RUN addgroup -g 1000 -S "${USER}" && \
    adduser -s /bin/sh -u 1000 -G "${USER}" -h "/home/${USER}" -D "${USER}"

# everything from this line onwards will run in the context of the unprivileged user
USER "${USER}"

WORKDIR "/home/${USER}/app"

COPY --from=build --chown="${USER}":"${USER}" /app/_build/$MIX_ENV/rel/lexin ./

ENTRYPOINT ["bin/lexin"]

CMD ["start"]
